import{o as i,a as r}from"../chunks/chunk-CRR3HCM0.js";import{j as e}from"../chunks/chunk-BVtPDciO.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */import{u as n}from"../chunks/chunk-BQoaMqtm.js";/* empty css                      *//* empty css                      */const l=[];function a(o){const t={a:"a",blockquote:"blockquote",p:"p",...n(),...o.components};return e.jsxs(e.Fragment,{children:[e.jsx(t.p,{children:"Vite introduces a novel development approach called Lazy Transpiling (aka On-demand Transpiling): instead of transpiling your entire codebase at once, Vite transpiles code only as you load pages."}),`
`,e.jsx(t.p,{children:"For example, if you define 100 pages and then open one of these pages in your browser then, in development, only the code for that one page is transpiled while the code for all the other 99 pages isn't transpiled."}),`
`,e.jsx(t.p,{children:"Thanks to lazy-transpiling, you can scale to extremely large codebases while preserving a fast development DX."}),`
`,e.jsx(t.p,{children:"This is a foundational novelty and is at the cornerstone of why Vite is dramatically faster than alternatives."}),`
`,e.jsx(t.p,{children:"We believe Lazy Transpiling to be an important part of the future of web tooling."}),`
`,e.jsxs(t.blockquote,{children:[`
`,e.jsxs(t.p,{children:["Lazy Transpiling is only applied in development. When building for production, Vite uses the traditional approach of building and bundling your entire codebase at once (Vite uses ",e.jsx(t.a,{href:"https://rollupjs.org",children:"Rollup"})," to do so)."]}),`
`]})]})}function s(o={}){const{wrapper:t}={...n(),...o.components};return t?e.jsx(t,{...o,children:e.jsx(a,{...o})}):a(o)}const d=Object.freeze(Object.defineProperty({__proto__:null,default:s,pageSectionsExport:l},Symbol.toStringTag,{value:"Module"})),z={hasServerOnlyHook:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!1}},isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:r}},onCreatePageContext:{type:"cumulative",definedAtData:[{filePathToShowToUser:"@brillout/docpress/renderer/onCreatePageContext",fileExportPathToShowToUser:[]}],valueSerialized:[{type:"pointer-import",value:i}]},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/lazy-transpiling/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:d}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}}};export{z as configValuesSerialized};
