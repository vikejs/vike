- Update boilerplates to use Hono

- head settings
  - name setting?
    - Appends `| ${name}` to title
      - No setting to opt-out, instead user should manually use config.head if all he wants is to inject the OG tag.
    - Sets OG tag
  - Use escapeInject for bodyHtmlStart
    - Soft deprecate not using it
  - locale
    - Instead of lang?
    - ```html
      <html lang="en">
      <meta property="og:locale" content="en_GB">
      ```
  - Remove lang setting (soft deprecation) in favor of using htmlAttributes?
    - I don't see a use case for lang yet, maybe for i18n?
  - More document settings?
    - https://github.com/vikejs/vike-react/pull/113/files#diff-43f0478bd822a071df19f8756e0833b975665ce5d118edde04ce1b7187cd63e2
  - Rename on{After}RenderClient to onRenderClient{Start,End}
    - Soft deprecate it (instead of adding a breaking change note)

v0.5 breaking changes:
=== Hihgest Prio
- Deprecate old design
- Remove TS helpers such as OnRenderHtmlAsync https://vike.dev/onRenderHtml#typescript
- Make routing fully sync
  - Forbid async Route Functions
=== Prio
- pageContext.url
- Improve/clean import paths.
  - Either move all isomorphic exports to `import * from 'vike'` or create individual export path for each export e.g. `import { render } from 'vike/render'`
    - E.g. remove `import * from 'vike/abort'` and `import * from 'vike/client'`
      ```diff
      - import * from 'vike/client/router'
      + import * from 'vike'
      // Or:
      + import { navigate } from 'vike/navigate'
      + import { prefetch } from 'vike/prefetch'
      ```
    - How about `vike/server`?
      - This one can probably stay bundled as loaded superfluous code on the server-side is probably ok, but let's double check how big the loaded superfluous code can be.
  - How about 'vike/types'? I guess move it to 'vike' iff. moving all isomorphics to 'vike'.
  - `import { navigate } from 'vike/navigate'`
- See & categorize/prioritize all TODOs in source code
- See v1-release tickets https://github.com/vikejs/vike/labels/v1%20release%20%3Astar2%3A such as:
  - https://github.com/vikejs/vike/issues/2107
  - https://github.com/vikejs/vike/issues/1851
- Make cumulative by default:
 - +onHydrationEnd
 - +guard
 - +onPageTransitionStart ?
 - more/most?
- Move `dist/assets.json` to `dist/server/assets.json`
  - Or move it `dist/server/assets-client.json` to?
  - Or remove it altogether in favor of `globalContext.assetsManifest`?
- Make navigate() automatically add Base URL by default?
- Make client entry be a single virtual file
  - Remove `import * as virtualFileExports from 'virtual:vike:entry:client:...'`
    - We can then avoid adding client runtime entry to optimizeDeps.exclude
  - Make +client.js cumulative https://github.com/vikejs/vike/issues/1834
  - Fix non-global +client.js
    - For example, make `import '@batijs/elements'` work for Vike's docs.
=== Maybe
- Make +data and +onBeforeRender cumulative https://github.com/vikejs/vike/issues/1833
- Forbid content-type
  - Maybe use x-powered-by header to check & enforce usage of pageContext.httpResponse.headers
- Remove dist/server/importBuild.{cjs,mjs,js}
- See vike.dev/migration/v0.5
  - See also vike.dev/migration/v1
  - Shall all breaking changes be listed or is it enough to say "first update to latest 0.4.x then follow all warnings then update to 0.5"?
- Set `cjsInterop: true` by default?
- Communicate that v0.5 essentially is the v1.0.0 in disguise: the plan is to eventually rename the latest `v0.5.x` to `v1.0.0`.
  - The plan for releasing the v1.0.0 being:
    - Implement feature requests considered essential, most notably: [#562 - Transpile server code](https://github.com/vikejs/vike/issues/562)
    - Make a big release announcement and blog post with a completely rehauled landing page.
      - Blog post: my personal journey towards building Vike (for rationle why Vike exists, see landing page instead of reading blog bost).
- Make CJS warning an error.
  - Keep the CJS build for a little while and if no one complains then remove the CJS build.
- Make guard() hook server-side only by default?
- Presrve scroll for route parameters other than the first one?
  - https://github.com/vikejs/vike/issues/1459
- Remove deprecated API support in getPrefetchSettings.ts
  - Remove all deprecated API, at least in client code?
- New Base URL setting: https://github.com/vikejs/vike/issues/1794
- Simplify pageContext return type?
- Deprecate returning `pageContext` from `onBeforeRender()`
  - Depecrate all return values of `onBeforeRender()`, `onRenderHtml`, and all hooks?
    - Including `documentHtml` and `injectFilter()`
  - Remove hook types such as `OnBeforeRenderAsync` https://vike.dev/onBeforeRender#typescript
== Dismissed
- Move hooks from `vike-{react,vue,solid}` to Vike core? E.g. `onRender{Client,Html}{Before,After}()`?
  - So far I don't see a need for this. The only upside would be to simplify the implementation of `vike-{react,vue,solid}` and, maybe, increased compatibility of Vike extensions (if some UI-framework-agnostic Vike extensions need those hooks then it could make sense to move hooks to Vike core).


pageContext prefetching
- Early experimental support: https://github.com/vikejs/vike/pull/1617
- Implement all TODO/pageContext-prefetch
- Add cache cleanup interval loop

Docs:
 - Add /{react,vue,solid} links under "Overview"
   - Add "Server Actions" section to /react
   - UPDATE: actually, it's maybe a bad idea because there won't be much content at /vue and /solid if we apply the change described in the next bullet point
     - Maybe we can move sections like "Server Actions" to /nextjs instead?
   - What should happen to the "Integration > React,Vue,Solid" links? How about making them a different page? E.g. moving `## Without Vike extension` there (while using <UseUiFrameworkVikeExtensionHint uiFrameworkName="React" noQuote={true} />).
   - Improve /{react,vue,solid}

- Add assertWarning() deprecations:
  - `pageContext.exports`
  - `pageContext.configEntries`

After V1 design release:
 - Implement data() hook
   - Update `vike-{react,vue,solid}` +title.js config
   - New config requestPageContextOnNavigation
     ```ts
     type requestPageContextOnNavigation =
       | true // default
       | 'minimal' // Equivalent to `{ makeHooksUniversal: true }`. (Or maybe `{ makeHooksUniversal: ['data', 'onBeforeRender'] }`?)
       | false // Equivalent to { makeHooksUniversal: true, skipPageContextInit: true }
       | {
           makeHooksUniversal: true | ('onBeforeRender' | 'data' | 'guard')[] // Change env of hooks from `{ client: false, server: true }` to `{ client: true, server: true }`
           // Is `skipPageContextInit: true` too dangerous (the user may break its app)? I think it's ok and, so far, I think a warning in the docs is enough.
           skipPageContextInit: true | string[] // e.g. ['user']
         }
     ```
     - By default, only call guard() hooks on the server-side (if requestPageContextOnNavigation.minimal isn't true)
     - Re-apply assertNotNull() when requestPageContextOnNavigation is set to 'minimal' or false, see https://github.com/vikejs/vike/blob/a1b1ab4a250c564789358f7892d829eab6b17d27/vike/shared/page-configs/serialize/parseConfigValuesImported.ts#L52-L58
 - Make +client.js work for all render modes
   - In order to support [github.com/vikejs/vike-react#28 - Client-side init code](https://github.com/vikejs/vike-react/issues/28)
   - Use case: ad-hoc client-side scripts such as error tracking and analytics
   - revert/adapt commit "[failed-attempt] make +client.js work for all render modes (#1209)" https://github.com/vikejs/vike/commit/64e423bd6c2cee860defc8157e7aa176d62d42e0
   - Make +client.js cumulative
     - Is a new computed config `config.clusterId: number` needed?
       - Server Routing instead of Client Routing for two pages that have a different clusterId
       - We do need this if we want to be able to "remove" +client.js scripts upon navigation, in other word in order to ensure that a +client.js doesn't leak to sibling pages
       - While a less clean implementation is possible (e.g. by not caring about leaking +client.js scripts), implementing clusterId could fairly easy while being future proof
       - clusterId is an auto-increment number that uniquely identifies following combination:
          - The list of +client.js file paths (if two pages have a different list of +client.js => they have different clusterId)
          - onRenderClient() file path (e.g. if a page uses vike-react while another page uses vike-vue => they have different onRenderClient() => they have different clusterId)
          - Maybe: allow user to assign a "cluster name" with `config.clientRouting: string`. Is this needed?

- refactor logging
  - New hook onLog(): https://github.com/vikejs/vike/issues/1438
  - Exact same logs between prod and dev, only difference is that some log objects have:
    - `isDevLog: true`
    - `willBeLogged: false` in production
    - `showTimestamp: true`
  - Never clear screen (it's complex with little benefit)
    - Add shortcut to clear screen
    - Maybe rotate colors upon no requests within 30s?
  - Only show a one-liner init log (instead of Vite's multi-line log)

Contact:
 - Payload CMS
   - Other CMS-related tools like Tina CMS
 - Shopify
