// Public use
export { getGlobalContext }
export { getGlobalContextSync }
export { getGlobalContextAsync }

// Internal use
export { getGlobalContextServerInternal }
export { getViteDevServer }
export { getViteConfig }
export { initGlobalContext_renderPage }
export { initGlobalContext_runPrerender }
export { initGlobalContext_getPagesAndRoutes }
export { setGlobalContext_viteDevServer }
export { setGlobalContext_viteConfig }
export { setGlobalContext_isPrerendering }
export { setGlobalContext_isProduction }
export { setGlobalContext_buildEntry } // production entry
export { clearGlobalContext }
export { assertBuildInfo }
export { updateUserFiles }
export { vikeConfigErrorRecoverMsg }
export type { BuildInfo }
export type { GlobalContextServerInternal as GlobalContextServerInternal }
export type { GlobalContextServer }

// The core logic revolves around:
// - virtualFileExports is the main requirement
// - In production: globalObject.buildEntry which is the production entry set by @brillout/vite-plugin-server-entry
//   - loadBuildEntry() sets globalObject.buildEntry and then sets virtualFileExports
//   - With vike-server it's set at server start: @brillout/vite-plugin-server-entry injects `import './entry.mjs'` (the production entry generated by @brillout/vite-plugin-server-entry) as first line of code of dist/server/index.mjs while dist/server/entry.mjs calls setGlobalContext_buildEntry()
//   - Without vike-server it's manually loaded here using importServerProductionEntry() which uses @brillout/vite-plugin-server-entry's autoImporter or crawler
// - In development: globalObject.viteDevServer which is Vite's development server
//   - globalObject.viteDevServer is used by updateUserFiles() which then sets virtualFileExports

import {
  assert,
  onSetupRuntime,
  assertUsage,
  assertWarning,
  isPlainObject,
  objectReplace,
  isObject,
  hasProp,
  getGlobalObject,
  genPromise,
  createDebugger,
  checkType,
  PROJECT_VERSION,
} from './utils.js'
import type { ViteManifest } from '../../types/ViteManifest.js'
import type { ResolvedConfig, ViteDevServer } from 'vite'
import { importServerProductionEntry } from '@brillout/vite-plugin-server-entry/runtime'
import { virtualFileIdEntryServer } from '../shared/virtualFiles/virtualFileEntry.js'
import pc from '@brillout/picocolors'
import type { VikeConfigPublicGlobal } from '../../shared/page-configs/resolveVikeConfigPublic.js'
import { loadPageRoutes, loadPageRoutesSync, type PageRoutes } from '../../shared/route/loadPageRoutes.js'
import { assertV1Design } from '../shared/assertV1Design.js'
import { resolveBase } from '../shared/resolveBase.js'
import type { ViteConfigRuntime } from '../vite/shared/getViteConfigRuntime.js'
import {
  createGlobalContextShared,
  getGlobalContextSyncErrMsg,
  type GlobalContextBase,
} from '../../shared/createGlobalContextShared.js'
import type { GlobalContext } from '../../types/PageContext.js'
import { prepareGlobalContextForPublicUsage } from '../../shared/prepareGlobalContextForPublicUsage.js'
import { logRuntimeError, logRuntimeInfo } from './loggerRuntime.js'
import { getVikeConfigErrorBuild, setVikeConfigError } from '../shared/getVikeConfigError.js'
import { hasAlreadyLogged } from './renderPage/isNewError.js'
import type { Hook } from '../../shared/hooks/getHook.js'
const debug = createDebugger('vike:globalContext')
const globalObject = getGlobalObject<
  {
    globalContext?: Record<string, unknown>
    viteDevServer?: ViteDevServer
    viteConfig?: ResolvedConfig
    viteConfigRuntime?: ViteConfigRuntime
    isPrerendering?: true
    initGlobalContext_runPrerender_alreadyCalled?: true
    buildEntry?: unknown
    buildEntryPrevious?: unknown
    waitForUserFilesUpdate?: Promise<void>
    waitForUserFilesUpdateResolve?: (() => void)[]
    vikeConfigHasRuntimeError?: boolean
    isProduction?: boolean
    buildInfo?: BuildInfo
    // Move to buildInfo.assetsManifest ?
    assetsManifest?: ViteManifest
    isInitialized?: true
  } & ReturnType<typeof getInitialGlobalObject>
>('runtime/globalContext.ts', getInitialGlobalObject())
// Trick to break down TypeScript circular dependency
// https://chat.deepseek.com/a/chat/s/d7e9f90a-c7f3-4108-9cd5-4ad6caed3539
const globalObjectTyped = globalObject as typeof globalObject & {
  globalContext?: GlobalContextServerInternal
}
const vikeConfigErrorRecoverMsg = pc.bold(pc.green('Vike config loaded'))

// Public usge
type GlobalContextServer = Pick<
  GlobalContextServerInternal,
  | 'assetsManifest'
  | 'config'
  | 'viteConfig'
  | 'viteConfigRuntime'
  | 'pages'
  | 'baseServer'
  | 'baseAssets'
  | 'isClientSide'
> &
  // https://vike.dev/globalContext#typescript
  Vike.GlobalContext &
  Vike.GlobalContextServer

// Internal usage
type GlobalContextServerInternal = Awaited<ReturnType<typeof setGlobalContext>>

async function getGlobalContextServerInternal() {
  // getGlobalContextServerInternal() should always be called after initGlobalContext()
  assert(globalObject.isInitialized)
  assertGlobalContextIsDefined()
  if (globalObject.isProduction !== true) await globalObject.waitForUserFilesUpdate
  const { globalContext } = globalObjectTyped
  assertIsDefined(globalContext)
  return { globalContext }
}

function assertIsDefined<T extends GlobalContextServerInternal>(
  globalContext: undefined | null | T,
): asserts globalContext is T {
  if (!globalContext) {
    debug('globalContext', globalContext)
    debug('assertIsDefined()', new Error().stack)
    assert(false)
  }
}
function assertGlobalContextIsDefined() {
  assertIsDefined(globalObjectTyped.globalContext)
  assert(globalObject.globalContext)
}

// We purposely return GlobalContext instead of GlobalContextServer because `import { getGlobalContext } from 'vike'` can resolve to the client-side implementation.
/**
 * Get runtime information about your app.
 *
 * https://vike.dev/getGlobalContext
 */
async function getGlobalContext(): Promise<GlobalContext> {
  debug('getGlobalContext()')
  const { isProduction } = globalObject
  // This assertion cannot fail for vike-server users (because when using vike-server it's guaranteed that globalObject.isProduction is set before executing any user-land code and any Vike extension code).
  assertUsage(isProduction !== undefined, "The global context isn't set yet, use getGlobalContextAsync() instead.")
  assert(typeof globalObject.isProduction === 'boolean')
  return await getGlobalContextAsync(isProduction)
}
/**
 * Get runtime information about your app.
 *
 * https://vike.dev/getGlobalContext
 */
async function getGlobalContextAsync(isProduction: boolean): Promise<GlobalContext> {
  debug('getGlobalContextAsync()')
  assertUsage(
    typeof isProduction === 'boolean',
    `[getGlobalContextAsync(isProduction)] Argument ${pc.cyan('isProduction')} ${
      isProduction === undefined ? 'is missing' : `should be ${pc.cyan('true')} or ${pc.cyan('false')}`
    }`,
  )
  setIsProduction(isProduction)
  if (!globalObject.globalContext) await initGlobalContext_getGlobalContextAsync()
  if (!isProduction) await globalObject.waitForUserFilesUpdate
  assertGlobalContextIsDefined()
  return getGlobalContextForPublicUsage()
}
/**
 * Get runtime information about your app.
 *
 * https://vike.dev/getGlobalContext
 */
function getGlobalContextSync(): GlobalContext {
  debug('getGlobalContextSync()')
  const { globalContext } = globalObjectTyped
  assertUsage(globalContext, getGlobalContextSyncErrMsg)
  const isProd: boolean = globalContext._isProduction
  assert(typeof isProd === 'boolean')
  assertWarning(
    isProd,
    // - We discourage users from using it in development because `pageContext.globalContext` is safer: I ain't sure but there could be race conditions when using `getGlobalContextSync()` inside React/Vue components upon HMR.
    // - I don't see any issues with getGlobalContextSync() in production.
    // - getGlobalContextSync() is used in production by vike-vercel
    //   - https://discord.com/channels/@me/942519153502339072/1389546794676916344 (PM between Rom and JoÃ«l)
    "getGlobalContextSync() shouldn't be used in development, see https://vike.dev/getGlobalContext",
    { onlyOnce: true },
  )
  return getGlobalContextForPublicUsage()
}
function getGlobalContextForPublicUsage(): GlobalContextServer {
  const { globalContext } = globalObjectTyped
  assert(globalContext)
  const globalContextForPublicUsage = prepareGlobalContextForPublicUsage(globalContext)
  return globalContextForPublicUsage
}

async function setGlobalContext_viteDevServer(viteDevServer: ViteDevServer) {
  debug('setGlobalContext_viteDevServer()')
  setIsProduction(false)
  // We cannot cache globalObject.viteDevServer because it's fully replaced when the user modifies vite.config.js => Vite's dev server is fully reloaded and a new viteDevServer replaces the previous one.
  if (!globalObject.viteDevServer) {
    assertIsNotInitializedYet()
  }
  assert(globalObject.viteConfig)
  globalObject.viteDevServer = viteDevServer
  globalObject.viteDevServerPromiseResolve(viteDevServer)

  const { success } = await updateUserFiles()
  if (!success) return
  assertGlobalContextIsDefined()
}
function setGlobalContext_viteConfig(viteConfig: ResolvedConfig, viteConfigRuntime: ViteConfigRuntime): void {
  if (globalObject.viteConfig) return
  assertIsNotInitializedYet()
  globalObject.viteConfig = viteConfig
  globalObject.viteConfigRuntime = viteConfigRuntime
}
function assertIsNotInitializedYet() {
  // In development, globalObject.viteDevServer always needs to be awaited for before initializing globalObject.globalContext
  assert(!globalObject.globalContext)
}
function setGlobalContext_isPrerendering() {
  globalObject.isPrerendering = true
  setIsProduction(true)
}
function setGlobalContext_isProduction(isProduction: boolean, tolerateContraditction = false) {
  if (true as boolean) return
  if (debug.isActivated) debug('setGlobalContext_isProduction()', { isProduction, tolerateContraditction })
  if (globalObject.isProduction === undefined) {
    setIsProduction(isProduction)
  } else {
    assert(globalObject.isProduction === isProduction || tolerateContraditction)
  }
}
function getViteDevServer(): ViteDevServer | null {
  return globalObject.viteDevServer ?? null
}
function getViteConfig(): ResolvedConfig | null {
  return globalObject.viteConfig ?? null
}

async function initGlobalContext_renderPage(): Promise<void> {
  debug('initGlobalContext_renderPage()')

  // `globalObject.isProduction === undefined` when using production server without `vike-server`. (There isn't any reliable signal we can use to determine early whether the environment is production or development.)
  if (globalObject.isProduction === undefined) setIsProduction(true)

  await initGlobalContext()
}

async function initGlobalContext_runPrerender(): Promise<void> {
  debug('initGlobalContext_runPrerender()')
  assert(globalObject.isPrerendering === true)
  assert(globalObject.isProduction === true)
  if (globalObject.initGlobalContext_runPrerender_alreadyCalled) return
  globalObject.initGlobalContext_runPrerender_alreadyCalled = true

  assert(globalObject.isPrerendering)
  assert(globalObject.viteConfig)

  // We assume initGlobalContext_runPrerender() to be called before:
  // - initGlobalContext_renderPage()
  // - initGlobalContext_getGlobalContextAsync()
  assertIsNotInitializedYet()

  await initGlobalContext()
}

async function initGlobalContext_getGlobalContextAsync(): Promise<void> {
  debug('initGlobalContext_getGlobalContextAsync()')
  await initGlobalContext()
}
async function initGlobalContext_getPagesAndRoutes(): Promise<void> {
  debug('initGlobalContext_getPagesAndRoutes()')
  setIsProduction(true)
  await initGlobalContext()
}
async function initGlobalContext(): Promise<void> {
  const { isProduction } = globalObject
  assert(typeof isProduction === 'boolean')
  if (!isProduction) {
    // await globalObject.viteDevServerPromise
    await updateUserFiles()
    assert(globalObject.waitForUserFilesUpdate)
    await globalObject.waitForUserFilesUpdate
  } else {
    await loadBuildEntry(globalObject.viteConfigRuntime?.build.outDir)
  }
  assertGlobalContextIsDefined()
  globalObject.isInitialized = true
}
function setIsProduction(isProduction: boolean) {
  debug('setIsProduction', isProduction)
  assert(typeof isProduction === 'boolean')
  if (globalObject.isProduction !== undefined) assert(globalObject.isProduction === isProduction)
  globalObject.isProduction = isProduction
}

function assertViteManifest(manifest: unknown): asserts manifest is ViteManifest {
  assert(isPlainObject(manifest))
  /* We should include these assertions but we don't as a workaround for PWA manifests: https://github.com/vikejs/vike/issues/769
     Instead, we should rename the vite manifest e.g. with https://vitejs.dev/config/build-options.html#build-manifest
  Object.entries(manifest)
    // circumvent esbuild bug: esbuild adds a `default` key to JSON upon `require('./some.json')`.
    .filter(([key]) => key !== 'default')
    .forEach(([_, entry]) => {
      assert(isPlainObject(entry))
      assert(typeof entry.file === 'string')
    })
  */
}

async function loadBuildEntry(outDir?: string) {
  debug('loadBuildEntry()')
  if (globalObject.globalContext) {
    debug('loadBuildEntry() - already done')
    return
  }
  if (!globalObject.buildEntry) {
    debug('importServerProductionEntry()')
    // importServerProductionEntry() loads dist/server/entry.mjs which calls setGlobalContext_buildEntry()
    await importServerProductionEntry({ outDir })
    if (!globalObject.buildEntry) {
      debug('globalObject.buildEntryPrevious')
      // Needed, for example, when calling the API prerender() then preview() because both trigger a importServerProductionEntry() call but only the first only is applied because of the import() cache. (A proper implementation would be to clear the import() cache, but it probably isn't possible on platforms such as Cloudflare Workers.)
      globalObject.buildEntry = globalObject.buildEntryPrevious
    }
    assert(globalObject.buildEntry)
    // If using `inject` then dist/server/index.js imports dist/server/entry.js and loadBuildEntry() isn't needed.
    // If dist/server/entry.js isn't imported then this means the user is running the original server entry `$ ts-node server/index.ts`.
    assertWarning(
      // vike-server => `inject === true`
      // vike-node => `inject === [ 'index' ]` => we don't show the warning to vike-node users (I don't remember why).
      globalObject.buildInfo?.viteConfigRuntime.vitePluginServerEntry.inject !== true || globalObject.isPrerendering,
      `Run the built server entry (e.g. ${pc.cyan('$ node dist/server/index.mjs')}) instead of the original server entry (e.g. ${pc.cyan('$ ts-node server/index.ts')})`,
      { onlyOnce: true },
    )
  }
  const { buildEntry } = globalObject
  assertBuildEntry(buildEntry)
  globalObject.assetsManifest = buildEntry.assetsManifest
  globalObject.buildInfo = buildEntry.buildInfo
  await setGlobalContext(buildEntry.virtualFileExports)
}

// This is the production entry, see:
// https://github.com/vikejs/vike/blob/798e5465dc3e3e6723b38b601a50350c0a006fb8/packages/vike/node/vite/plugins/pluginBuild/pluginBuildEntry.ts#L47
async function setGlobalContext_buildEntry(buildEntry: unknown) {
  debug('setGlobalContext_buildEntry()')
  setIsProduction(true)
  assertBuildEntry(buildEntry)
  globalObject.buildEntry = buildEntry
  globalObject.buildEntryPrevious = buildEntry
  assert(globalObject.buildEntry) // ensure no infinite loop
  await loadBuildEntry()
  assertGlobalContextIsDefined()
  debug('setGlobalContext_buildEntry() - done')
}

type BuildEntry = {
  virtualFileExports: Record<string, unknown>
  assetsManifest: ViteManifest
  buildInfo: BuildInfo
}
type BuildInfo = {
  versionAtBuildTime: string
  usesClientRouter: boolean // TO-DO/next-major-release: remove
  viteConfigRuntime: ViteConfigRuntime
}
function assertBuildEntry(buildEntry: unknown): asserts buildEntry is BuildEntry {
  assert(isObject(buildEntry))
  assert(hasProp(buildEntry, 'virtualFileExports', 'object'))
  const { virtualFileExports } = buildEntry
  assert(hasProp(buildEntry, 'assetsManifest', 'object'))
  const { assetsManifest } = buildEntry
  assertViteManifest(assetsManifest)
  assert(hasProp(buildEntry, 'buildInfo', 'object'))
  const { buildInfo } = buildEntry
  assertBuildInfo(buildInfo)
  checkType<BuildEntry>({ virtualFileExports, assetsManifest, buildInfo })
}
function assertBuildInfo(buildInfo: unknown): asserts buildInfo is BuildInfo {
  assert(isObject(buildInfo))
  assert(hasProp(buildInfo, 'versionAtBuildTime', 'string'))
  assertVersionAtBuildTime(buildInfo.versionAtBuildTime)
  assert(hasProp(buildInfo, 'viteConfigRuntime', 'object'))
  assert(hasProp(buildInfo.viteConfigRuntime, '_baseViteOriginal', 'string'))
  assert(hasProp(buildInfo.viteConfigRuntime, 'root', 'string'))
  assert(hasProp(buildInfo.viteConfigRuntime, 'build', 'object'))
  assert(hasProp(buildInfo.viteConfigRuntime.build, 'outDir', 'string'))
  assert(hasProp(buildInfo.viteConfigRuntime, 'vitePluginServerEntry', 'object'))
  assert(hasProp(buildInfo, 'usesClientRouter', 'boolean'))
}
function assertVersionAtBuildTime(versionAtBuildTime: string) {
  const versionAtRuntime = PROJECT_VERSION
  const pretty = (version: string) => pc.bold(`vike@${version}`)
  assertUsage(
    versionAtBuildTime === versionAtRuntime,
    `Re-build your app (you're using ${pretty(versionAtRuntime)} but your app was built with ${pretty(versionAtBuildTime)})`,
  )
}

async function updateUserFiles(): Promise<{ success: boolean }> {
  assert(!globalObject.isProduction)
  const { promise, resolve } = genPromise<void>()
  globalObject.waitForUserFilesUpdate = promise
  globalObject.waitForUserFilesUpdateResolve ??= []
  globalObject.waitForUserFilesUpdateResolve.push(resolve)

  const onError = (err: unknown) => {
    if (!hasAlreadyLogged(err)) {
      logRuntimeError(err, null)
    }
    setVikeConfigError({ errorRuntime: { err } })
    globalObject.vikeConfigHasRuntimeError = true
    return { success: false }
  }
  const onSuccess = () => {
    if (globalObject.vikeConfigHasRuntimeError) {
      assert(logRuntimeInfo) // always defined in dev
      logRuntimeInfo(vikeConfigErrorRecoverMsg, null, 'error-recover')
    }
    globalObject.vikeConfigHasRuntimeError = false
    setVikeConfigError({ errorRuntime: false })
    globalObject.waitForUserFilesUpdateResolve!.forEach((resolve) => resolve())
    globalObject.waitForUserFilesUpdateResolve = []
    resolve()
    return { success: true }
  }

  const isOutdated = () => false
  /*
    // There is a newer call â let the new call supersede the old one.
    // We deliberately swallow the intermetidate state (including any potential error) â it's now outdated and has existed only for a very short period of time.
    globalObject.waitForUserFilesUpdate !== promise ||
    // Avoid race condition: abort if there is a new globalObject.viteDevServer (happens when vite.config.js is modified => Vite's dev server is fully reloaded).
    viteDevServer !== globalObject.viteDevServer
    */

  /*
  const { viteDevServer } = globalObject
  assert(viteDevServer)
  */
  let hasError = false
  let virtualFileExports: Record<string, unknown> | undefined
  let err: unknown
  try {
    virtualFileExports = await import('virtual:vike:entry:server' as string)
    // virtualFileExports = await viteDevServer.ssrLoadModule(virtualFileIdEntryServer)
  } catch (err_) {
    hasError = true
    err = err_
  }
  if (isOutdated()) return { success: false }
  if (hasError) return onError(err)
  virtualFileExports = (virtualFileExports as any).default || virtualFileExports

  if (getVikeConfigErrorBuild()) {
    return { success: false }
  }

  try {
    await setGlobalContext(virtualFileExports)
  } catch (err_) {
    hasError = true
    err = err_
  }
  if (isOutdated()) return { success: false }
  if (hasError) return onError(err)
  return onSuccess()
}

async function setGlobalContext(virtualFileExports: unknown) {
  debug('setGlobalContext()')
  assert(!getVikeConfigErrorBuild())
  const globalContext = await createGlobalContextShared(
    virtualFileExports,
    globalObject,
    addGlobalContext,
    addGlobalContextTmp,
  )

  assertV1Design(
    // pageConfigs is PageConfigRuntime[] but assertV1Design() requires PageConfigBuildTime[]
    globalContext._pageConfigs.length > 0,
    globalContext._pageFilesAll,
  )

  assertGlobalContextIsDefined()
  onSetupRuntime()

  debug('setGlobalContext() - done')

  // Never actually used, only used for TypeScript `ReturnType<typeof setGlobalContext>`
  return globalContext
}

async function addGlobalContextTmp(globalContext: GlobalContextBase) {
  debug('addGlobalContextTmp()')
  const { pageRoutes, onBeforeRouteHook } = await loadPageRoutes(
    globalContext._pageFilesAll,
    globalContext._pageConfigs,
    globalContext._pageConfigGlobal,
    globalContext._allPageIds,
  )
  return addGlobalContextCommon(globalContext, pageRoutes, onBeforeRouteHook)
}
function addGlobalContext(globalContext: GlobalContextBase) {
  debug('addGlobalContext()')
  const { pageRoutes, onBeforeRouteHook } = loadPageRoutesSync(
    globalContext._pageFilesAll,
    globalContext._pageConfigs,
    globalContext._pageConfigGlobal,
    globalContext._allPageIds,
  )
  return addGlobalContextCommon(globalContext, pageRoutes, onBeforeRouteHook)
}
function addGlobalContextCommon(
  globalContext: GlobalContextBase,
  pageRoutes: PageRoutes,
  onBeforeRouteHook: null | Hook,
) {
  const globalContextBase = {
    isClientSide: false as const,
    _pageRoutes: pageRoutes,
    _onBeforeRouteHook: onBeforeRouteHook,
  }
  const { viteDevServer, viteConfig, viteConfigRuntime, isPrerendering, isProduction } = globalObject
  assert(typeof isProduction === 'boolean')
  if (!isProduction) {
    // assert(viteDevServer)
    assert(globalContext) // main common requirement
    // assert(viteConfig)
    // assert(viteConfigRuntime)
    assert(!isPrerendering)
    return {
      ...globalContextBase,
      // ...resolveBaseRuntime(viteConfigRuntime, globalContext.config),
      baseServer: '/',
      baseAssets: '/',
      _isProduction: false as const,
      _isPrerendering: false as const,
      assetsManifest: null,
      _viteDevServer: viteDevServer,
      viteConfig,
      viteConfigRuntime,
    }
  } else {
    assert(globalObject.buildEntry)
    assert(globalContext) // main common requiement
    const { buildInfo, assetsManifest } = globalObject
    assert(buildInfo)
    assert(assetsManifest)
    const globalContextBase2 = {
      ...globalContextBase,
      ...resolveBaseRuntime(buildInfo.viteConfigRuntime, globalContext.config),
      _isProduction: true as const,
      assetsManifest,
      _viteDevServer: null,
      viteConfigRuntime: buildInfo.viteConfigRuntime,
      _usesClientRouter: buildInfo.usesClientRouter,
    }
    if (isPrerendering) {
      assert(viteConfig)
      return {
        ...globalContextBase2,
        _isPrerendering: true as const,
        viteConfig,
      }
    } else {
      return {
        ...globalContextBase2,
        _isPrerendering: false as const,
        viteConfig: null,
      }
    }
  }
}

function clearGlobalContext() {
  debug('clearGlobalContext()')
  objectReplace(globalObject, getInitialGlobalObject(), ['buildEntryPrevious'])
}

function getInitialGlobalObject() {
  debug('getInitialGlobalObject()')
  const { promise: viteDevServerPromise, resolve: viteDevServerPromiseResolve } = genPromise<ViteDevServer>()
  return {
    isProduction: false,
    viteDevServerPromise,
    viteDevServerPromiseResolve,
  }
}

function resolveBaseRuntime(
  viteConfigRuntime: BuildInfo['viteConfigRuntime'],
  config: VikeConfigPublicGlobal['config'],
) {
  const baseViteOriginal = viteConfigRuntime._baseViteOriginal
  const baseServerUnresolved = config.baseServer ?? null
  const baseAssetsUnresolved = config.baseAssets ?? null
  return resolveBase(baseViteOriginal, baseServerUnresolved, baseAssetsUnresolved)
}
